#!/usr/bin/env bash

if [ -d ~/.config/microfur/remotes ]
then :
else
  mkdir -p ~/.config/microfur/remotes
  touch ~/.config/microfur/remotes/local
fi

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" 
me=$(dirname $dir)/etc/microfur
cmsis=$me/Drivers/CMSIS
stlinkCommand="st-flash"

set -e
device=$cmsis/Device/ST/STM32____
linkers=$device/Source/Templates/gcc/linker
headers=$device/Include
system=$device/Source/Templates
core=$cmsis/Include

no_linker() {
  echo ".microfur file must be present"
  echo "It contains information for which chip to build"
  echo "Example file:"
  echo "  family=F100XB"
  echo "  linker=F100XB"
  echo "If linker not specified, will use upper-cased family"
  exit 1
}

get_cortex () {
  case ${family:0:2} in
    'f0') cortex="m0";;
    'l0') cortex="m0plus";;
    'f1') cortex="m3";;
    'f2') cortex="m3";;
    'f3') cortex="m4";;
    'f4') cortex="m4";;
    'l4') cortex="m4";;
    'f7') cortex="m4";;
    *)
      echo "Can't deduce cortex core from MCU family :("
      exit 1
  esac

}

get_linker () {
  if [[ -e .microfur ]]
  then
    source .microfur
    if [[ $family != "" ]]
    then
      if [[ $linker == "" ]]
      then
        linker="${family^^}"
      fi
      link="STM32"$linker"_FLASH.ld"
      startup=$system"/gcc/startup_stm32"${family,,}".s"
      dev=$(echo "STM32"${family^^} | sed -e "s/X/x/")
    else
      echo "Must specify 'family' variable in .microfur"
      echo "Example:"
      echo "  family=f100xb"
      echo "Also you can specify linker:"
      echo "  linker=L476RGTx"
      exit 1
    fi
  else no_linker
  fi
}

drop_dead () {
  echo "Usage:"
  echo "  help {defs|ref|data|m0|m0plus|m3|m4|m7} # show file with defines in \$EDITOR"
  echo "  template # copy template project files here (no clobber)"
  echo "  remotes # list possible remotes"
  echo "  build [file] # compile, link and copy binary here"
  echo "  flash [<remote> [file]] # (possibly over ssh) flash binary"
  echo "  all [<remote> [file]] # build, then flash"
  echo "Note: without <file> will compile 'main.c' and flash 'main.bin'"
  echo "Note: <remote> is a file located in ~/.config/microfur/remotes/"
  echo "Example remote file:"
  echo "  programmerPath='/dev/stlinkv1_4'"
  echo "  remoteHost='solder'"
  echo "  stlinkCommand='~/stlink/build/Release/st-flash'"
  echo "Note: if using stlink v2, do not specify 'programmerPath'"
  echo "Note: if intend to use local machine, do not specify 'remoteHost'"
  echo "Note: stlinkCommand defaults to 'stlink'"
  exit 1
}

place=$(mktemp -d)

build () {
  get_linker
  get_cortex
  flags="-mcpu=cortex-$cortex -mthumb --specs=nosys.specs -Wl,--gc-sections"
  includes="-I$cmsis -I$device -I$headers -I$system -I$linkers -I$core"
  cat $linkers/$link | sed "s/^0//g" > $place/linker
  arm-none-eabi-gcc -o $place/main.elf $flags $includes -D$dev -T $place/linker $startup $1
  arm-none-eabi-objcopy -O binary $place/main.elf $place/main.bin
}

clean () {
  rm -rf $place
}

flash_remote () {
  scp $1 $remoteHost:firmware.bin
  ssh $remoteHost $stlinkCommand --reset write $programmerPath firmware.bin 0x8000000
  ssh $remoteHost rm firmware.bin
}
if [[ $1 == "remotes" ]]
then
  if [[ $# == 1 ]]
  then
    echo "List of possible remotes:"
    ls -1 ~/.config/microfur/remotes
  else drop_dead
  fi
elif [[ $1 == "help" ]]
then
  if [[ $2 == "data" ]]
  then
    get_linker
    source ~/.config/microfur/pdfCommand
    $pdfCommand $me/Documentation/${family^^}/Datasheet.pdf 2> /dev/null &
    exit 0
  elif [[ $2 == "ref" ]]
  then
    get_linker
    source ~/.config/microfur/pdfCommand
    $pdfCommand $me/Documentation/${family^^}/Reference.pdf 2> /dev/null &
    exit 0
  elif [[ $2 == "defs" ]]
  then
    get_linker
    $EDITOR $headers/stm32${family,,}.h
    exit 0
  elif [[ $2 =~ ^m.(plus)?$ ]]
  then
    $EDITOR $core/core_c$2.h
    exit 0
  else drop_dead
  fi
elif [[ $1 == "template" ]]
then
  if [[ $# == 1 ]]
  then q=$(mktemp -d)
       cp -r $me/templates/. $q/
       chmod -R u+w $q
       cp -rn $q/. .
       rm $q -r
  else drop_dead
  fi
elif [[ $1 == "build" ]]
then
  if [[ $# == 2 ]]
  then main=$2
  elif [[ $# == 1 ]]
  then main="main.c"
  else drop_dead
  fi
  echo Building locally
  build $main
  cp $place/main.bin "./$(echo $main | cut -f 1 -d '.').bin"
  cp $place/main.elf "./$(echo $main | cut -f 1 -d '.').elf"
  clean
elif [[ $1 == "flash" ]]
then
  source ~/.config/microfur/remotes/$2
  if [[ $# == 2 ]]
  then file="main.bin"
  elif [[ $# == 3 ]]
  then file=$3
  fi
  if [[ $remoteHost != "" ]]
  then
    echo Flashing remotely
    flash_remote $file
  else
    echo Flashing locally
    $stlinkCommand write $programmerPath $file 0x8000000
  fi
elif [[ $1 == "all" ]]
then
  source ~/.config/microfur/remotes/$2
  if [[ $# == 2 ]]
  then file="main.c"
  elif [[ $# == 3 ]]
  then file=$3
  fi
  if [[ $remoteHost != "" ]]
  then
    echo Building here, flashing remotely
    build $file
    flash_remote $place/main.bin
    clean
  else
    echo Building and flashing locally
    build $file
    $stlinkCommand erase $programmerPath
    $stlinkCommand write $programmerPath $place/$(echo $file | cut -f 1 -d '.').bin 0x8000000
    clean
  fi
else
  drop_dead
fi
